diff -urNp NVIDIA-Linux-x86_64-352.09-old/kernel/nv.c NVIDIA-Linux-x86_64-352.09/kernel/nv.c
--- NVIDIA-Linux-x86_64-352.09-old/kernel/nv.c	2015-05-12 16:35:47.000000000 -0400
+++ NVIDIA-Linux-x86_64-352.09/kernel/nv.c	2015-06-11 20:41:38.000000000 -0400
@@ -720,7 +720,7 @@ int __init nvidia_init_module(void)
 #endif
 
     nvidia_stack_t_cache = NV_KMEM_CACHE_CREATE(nvidia_stack_cache_name,
-                                                nvidia_stack_t);
+                                                nvidia_stack_t, SLAB_USERCOPY);
     if (nvidia_stack_t_cache == NULL)
     {
         nv_printf(NV_DBG_ERRORS, "NVRM: stack cache allocation failed!\n");
@@ -854,7 +854,7 @@ int __init nvidia_init_module(void)
     nv_state_init_gpu_uuid_cache(nv);
 
     nvidia_pte_t_cache = NV_KMEM_CACHE_CREATE(nvidia_pte_cache_name,
-                                              nvidia_pte_t);
+                                              nvidia_pte_t, 0);
     if (nvidia_pte_t_cache == NULL)
     {
         rc = -ENOMEM;
@@ -865,7 +865,7 @@ int __init nvidia_init_module(void)
     if (!nv_multiple_kernel_modules)
     {
         nvidia_p2p_page_t_cache = NV_KMEM_CACHE_CREATE(nvidia_p2p_page_cache_name,
-                                                       nvidia_p2p_page_t);
+                                                       nvidia_p2p_page_t, 0);
         if (nvidia_p2p_page_t_cache == NULL)
         {
             rc = -ENOMEM;
diff -urNp NVIDIA-Linux-x86_64-352.09-old/kernel/nv-linux.h NVIDIA-Linux-x86_64-352.09/kernel/nv-linux.h
--- NVIDIA-Linux-x86_64-352.09-old/kernel/nv-linux.h	2015-05-12 16:35:47.000000000 -0400
+++ NVIDIA-Linux-x86_64-352.09/kernel/nv-linux.h	2015-06-11 20:41:38.000000000 -0400
@@ -1418,11 +1418,11 @@ extern void *nvidia_stack_t_cache;
 
 #if !defined(NV_VMWARE)
 #if (NV_KMEM_CACHE_CREATE_ARGUMENT_COUNT == 5)
-#define NV_KMEM_CACHE_CREATE(name, type)    \
-    kmem_cache_create(name, sizeof(type), 0, 0, NULL)
+#define NV_KMEM_CACHE_CREATE(name, type, flags)    \
+    kmem_cache_create(name, sizeof(type), 0, flags, NULL)
 #else
-#define NV_KMEM_CACHE_CREATE(name, type)    \
-    kmem_cache_create(name, sizeof(type), 0, 0, NULL, \
+#define NV_KMEM_CACHE_CREATE(name, type, flags)    \
+    kmem_cache_create(name, sizeof(type), 0, flags, NULL, \
                       NULL)
 #endif
 #define NV_KMEM_CACHE_DESTROY(kmem_cache)   \
diff -urNp NVIDIA-Linux-x86_64-352.09-old/kernel/uvm/uvm_common.c NVIDIA-Linux-x86_64-352.09/kernel/uvm/uvm_common.c
--- NVIDIA-Linux-x86_64-352.09-old/kernel/uvm/uvm_common.c	2015-05-12 16:37:12.000000000 -0400
+++ NVIDIA-Linux-x86_64-352.09/kernel/uvm/uvm_common.c	2015-06-11 20:41:53.000000000 -0400
@@ -75,7 +75,6 @@ NvBool uvmnext_activated(void)
 #endif // NVIDIA_UVM_NEXT_ENABLED
 
 static dev_t g_uvmBaseDev;
-struct UvmOpsUvmEvents g_exportedUvmOps;
 
 // TODO: This would be easier if RM allowed for multiple registrations, since we
 //       could register UVM-Lite and UVM-Next separately (bug 1372835).
@@ -108,9 +107,11 @@ static NV_STATUS uvmSetupGpuProvider(voi
     NV_STATUS status = NV_OK;
 
 #ifdef NVIDIA_UVM_RM_ENABLED
-    g_exportedUvmOps.startDevice = uvm_gpu_event_start_device;
-    g_exportedUvmOps.stopDevice  = uvm_gpu_event_stop_device;
-    g_exportedUvmOps.isrTopHalf  = uvmnext_isr_top_half;
+    static struct UvmOpsUvmEvents g_exportedUvmOps = {
+        .startDevice = uvm_gpu_event_start_device,
+        .stopDevice  = uvm_gpu_event_stop_device,
+        .isrTopHalf  = uvmnext_isr_top_half,
+    };
 
     // call RM to exchange the function pointers.
     status = nvUvmInterfaceRegisterUvmCallbacks(&g_exportedUvmOps);
