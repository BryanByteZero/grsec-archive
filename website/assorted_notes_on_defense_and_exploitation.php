<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<meta name="robots" content="NOODP, NOARCHIVE">
<meta name="description" content="grsecurity is an extensive security enhancement to the Linux kernel that defends against a wide range of security threats through intelligent access control, memory corruption-based exploit prevention, and a host of other system hardening that generally require no configuration.">

<title>
grsecurity - Assorted Notes on Defense and Exploitation</title>


<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png?v=5A5zyaR2my">
<link rel="icon" type="image/png" href="/favicon-32x32.png?v=5A5zyaR2my" sizes="32x32">
<link rel="icon" type="image/png" href="/favicon-16x16.png?v=5A5zyaR2my" sizes="16x16">
<link rel="manifest" href="/manifest.json?v=5A5zyaR2my">
<link rel="mask-icon" href="/safari-pinned-tab.svg?v=5A5zyaR2my" color="#344d83">
<link rel="shortcut icon" href="/favicon.ico?v=5A5zyaR2my">
<meta name="theme-color" content="#ffffff">

<script type='text/javascript' src='/js/header.js'></script>
<link rel='stylesheet' href='/scss/style.css' type='text/css' media='all' />

</head>
<body>

<header id="top" class="site-header" role="banner">

	<div class="header-content wrap">

		<h1 class="logo">
			<a href="/index.php"><img src="/img/grsecurity.svg" alt="grsecurity"></a>
		</h1>

		<button class="menu-btn">Show Navigation</button>
<div class="nav-wrap">
	<nav class="access" role="navigation" aria-label="Primary" itemscope itemtype="http://www.schema.org/SiteNavigationElement">
		<ul>
			<li itemprop="name"><a href="/index.php" itemprop="url">Home</a></li>
			<li itemprop="name"><a href="/features.php" itemprop="url">Features</a></li>
			<li itemprop="name"><a href="/support.php" itemprop="url">Support</a></li>
			<li itemprop="name"><a href="/papers.php" itemprop="url">Papers</a></li>
			<li itemprop="name"><a href="/blog.php" itemprop="url">Blog</a></li>
			<li><a href="/purchase.php" class="btn" itemprop="url"><span itemprop="name">Purchase</span></a></li>
		</ul>

	</nav>
</div> <!-- .nav-wrap -->

	</div>

</header>

	<main>
		<article>
			<header class="masthead">
				<div class="wrap">
					<h1 class="large-headline">Assorted Notes on Defense and Exploitation</h1>
				</div>
			</header>

			<section class="bar pull-up blog">
				<div class="wrap">
					<div class="panel">
<p>As I mentioned at the RSA Europe panel on &quot;the History and Future of Binary Exploitation&quot;, we have been seeing and will continue to see a shift in importance from the discovery of vulnerabilities in individual pieces of software to the discovery of vulnerabilities in mitigation techniques.  The effectiveness (and cost-effectiveness) of the protections pioneered in PaX should be clear to everyone by this point, even if the clarity of this situation is a bit muddled by poor implementations/design decisions on certain OSes.</p>
<p>It was for this reason that I was a bit surprised by the presentation by Andreas Bogk at 27C3 recently entitled &quot;Defense is not dead.&quot;  I of course don't argue with this title, though I'd go further to say that it hasn't been dead for the past 10 years, if you've been paying attention.  I disagree with the conclusions of the presentation though, and some of the statements made in it bothered me.  A video of the presentation is available at: <a href="http://achtbaan.nikhef.nl/27c3-stream/releases/mkv/%5b4123%5d%20Defense%20is%20not%20dead/">http://achtbaan.nikhef.nl/27c3-stream/r ... ot%20dead/</a> .  Andreas is definitely very bright, but discussing the solution to our security problems in terms of removing all the exploitable bugs through formally-verified compilers and new languages/processors/OSes seems rather misguided.</p>
<p>Defense will die of old age before normal users will see security problems evaporate from these technologies.  Our real-world experience should have sufficiently demonstrated to us that ridding the world of vulnerabilities will never happen (not to mention all the legacy code still laying around).  Formal verification also has the real potential to introduce a sense of false security.  How will users have knowledge of what was proven where?  The verification is only as good as the proof.  Does any long-term adoption plan exist?  How would we (or is it even possible to) transition to such an extreme solution?  Is it possible to solve the problem of legacy code? Can you run an old firefox binary on this new system without having your data stolen out of it via an exploit?  There are all kinds of other societal factors to consider, like the fact that users are generally against alteration of their computing experience in a significant way (see the backlash against the Vista UAC).  Barring some reality-based answers to these questions, I'm inclined to think of this approach more in terms of concept cars or fashion shows: the point isn't to take the &quot;solution&quot; wholesale, but to find what bits and pieces you can integrate into current solutions in a more progressive way.</p>
<p>We continue to see vulnerabilities in MS's implementation of PaX's PAGEEXEC/ASLR features (or vulnerabilities in other vendors' use of said mitigations due to certain design decisions and compromises).  It's surprising actually that this many years into having this functionality, large vendors continue to apparently fail at implementing any kind of QA along the lines of &quot;don't ship out any code without /DYNAMICBASE,&quot; which has lead to nearly all of the &quot;ASLR bypass&quot; stories that have cropped up in the past year or so.</p>
<p>It's important that the vendors take the initiative here, because with the trends in security going the way they are, the self-interest of the industry prevents it from being benevolent in reporting these kinds of mitigation vulnerabilities.  There's a difference between killing a single vulnerability, which is probably found via fuzzing and which another researcher has likely also found, and killing a mitigation vulnerability that may make the next 20 vulnerabilities discovered unexploitable (or only unreliably exploitable).  I've already heard of this kind of behavior taking place, and it's unfortunate and unacceptable that money/job security/industry security is given greater priority over actually fixing security problems.  But this is all further evidence in what I've mentioned to others as an industry knowingly in its death throes.  The tendency to ignore the latest OS/architecture trends and the latest mitigations in exploitation research is yet further evidence.</p>
<p>On the topic of mitigations, it's important to make the distinction between things like PAGEEXEC/SEGMEXEC/MPROTECT/ASLR and EAT address filtering.  EAT address filtering has more in common with things like Comodo's Memory Firewall product that claimed protection against ret2libc (see: <a href="http://forums.comodo.com/frequently-asked-questions-comodo-memory-firewall/cmg-dep-t12237.0.html">http://forums.comodo.com/frequently-ask ... 237.0.html</a>) but simply contained a weak protection against canned ret2libc exploits against specific APIs.  With any knowledge of the method Comodo was using, through some minutes of reversing, it wasn't difficult to modify a ret2libc-style exploit to still work.  In November, Skylined published a bypass for EAT address filtering, which he wisely called a &quot;pseudo-mitigation&quot; (see: <a href="http://skypher.com/index.php/2010/11/17/bypassing-eaf/">http://skypher.com/index.php/2010/11/17/bypassing-eaf/</a>).  A side-note about the comments to the article: DRx are privileged registers, so access to them by unprivileged code triggers an exception (i.e. you cannot just clear DR7 to evade detection).  GD thus has nothing to do with this -- it would only cause privileged access to DRx to fault as well.  There are other caveats associated with GD that generally makes it useless for anything security related, but people always like throwing it out there as evidence that they read the Intel manuals or something.</p>
<p>We need to be likewise careful when discussing &quot;sandboxes.&quot;  It's a failure that we have discussions about software like Adobe Reader that boil down to: &quot;Person 1: Adobe Reader X has a sandbox. Person 2: A sandbox? that's great!&quot;  The implementation of the sandbox matters.  This is why information like that contained in Mark Dowd's posts: <a href="http://blog.azimuthsecurity.com/2010/05/chrome-sandbox-part-1-of-3-overview.html">http://blog.azimuthsecurity.com/2010/05 ... rview.html</a> are important, though it would be nice to have this kind of information more readily available to users of the software and without the bias of the vendors themselves.  Preventing the execution of arbitrary code or other control flow modifications has benefits for sandboxing as well.  If you can guarantee that an attacker can't just issue arbitrary system calls (in order to exploit a kernel-level vulnerability as part of his/her exploit chain) then it doesn't matter so much that the sandbox in place has no syscall-level filtering.</p>
<p>Defense isn't dead, but it's not easy to do (properly), especially under the constraints Microsoft and others have to operate under.  It's too bad there aren't more people in the industry interested in defense -- if there were, perhaps we could all work together to put ourselves out of jobs!</p>
<p>Accepting applications,</p>
<p>-Brad</p>
					</div><!-- .panel -->
				</div><!-- .wrap -->
			</section>
		</article>
	</main>

    <footer class="colophon" role="contentinfo">
            <div class="upper-footer wrap">
                <a class="back-to-top" href="#top">Back to Top</a>

                <div class="col-1-3 first about">
                    <h4>About grsecurity</h4>
                    <p>grsecurityÂ® is an extensive security enhancement to the Linux kernel that defends against a wide range of security threats through intelligent access control, memory corruption-based exploit prevention, and a host of other system hardening that generally require no configuration.</p>
                </div>
                <div class="col-1-3 quick-links">
                    <div class="upper-footer-inner-wrap">
                        <h4>Quick Links</h4>
                        <nav class="footer-menu">
                            <ul>
                               <li><a href="index.php">Home</a></li>
                                <li><a href="features.php">Features</a></li>
                                <li><a href="support.php">Support</a></li>
                                <li><a href="papers.php">Papers</a></li>
                                <li><a href="blog.php">Blog</a></li>
                                <li><a href="download.php">Download</a></li>
                            </ul>
                        </nav>
                    </div>
                </div>
                <div class="col-1-3 last contact">
                    <div class="upper-footer-inner-wrap">
                        <h4>Get in Touch</h4>
                        <span class="phone"><a href="tel:949-424-7732">949-424-7732</a></span>
                        <span class="email"><a href="mailto:contact@grsecurity.net">contact@grsecurity.net</a></span>
                    </div>
                </div>
            </div>
            <hr>
            <div class="lower-footer wrap">
                <div class="fine-print">
                    <a href="trademark_policy.php"><strong>Trademark Policy</strong></a>
                </div>
                <span class="text">&copy; Open Source Security, Inc 2013-2017.</span><br>
		<span class="text">grsecurity is a registered trademark of Open Source Security, Inc.</span>
		<span class="text">Linux is the registered trademark of Linus Torvalds.</span>

            </div><!-- .lower-footer -->

    </footer><!-- .colophon -->

<script src="/js/webfont.js"></script>
<script src="/js/webfont_load.js"></script>

<script type='text/javascript' src='/js/script.js'></script>

</body>
</html>
